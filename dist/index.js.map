{"version":3,"sources":["../dist-esnext/index.js"],"names":["createTestFile","readStream","fileName","existsSync","console","log","data","chunkLines","i","appendFileSync","err","onEnd","lineChunk","numLines","flushTail","lastChunk","createReadStream","encoding","pipe","on","chunk"],"mappings":";;;;;QAEgBA,c,GAAAA,c;QAoBAC,U,GAAAA,U;;AAtBhB;;AACA;;;;;;AACO,SAASD,cAAT,CAAwBE,QAAxB,EAAkC;AACrC,QAAI,aAAGC,UAAH,CAAcD,QAAd,CAAJ,EAA6B;AACzBE,gBAAQC,GAAR,CAAY,0BAAZ;AACA;AACH;AACDD,YAAQC,GAAR,CAAY,sBAAZ;AACA,QAAIC,OAAO,EAAX;AACA,QAAIC,aAAa,CAAjB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,OAApB,EAA6BA,GAA7B,EAAkC;AAC9BD;AACAD,gBAAWE,CAAX;AACA,YAAID,eAAe,IAAnB,EAAyB;AACrBH,oBAAQC,GAAR,CAAY,qBAAZ,EAAmCG,CAAnC;AACA,yBAAGC,cAAH,CAAkBP,QAAlB,EAA4BI,IAA5B,EAAkC,UAACI,GAAD;AAAA,uBAASN,QAAQC,GAAR,CAAYK,GAAZ,CAAT;AAAA,aAAlC;AACAH,yBAAa,CAAb;AACAD,mBAAO,EAAP;AACH;AACJ;AACDF,YAAQC,GAAR,CAAY,cAAZ;AACH;AACM,SAASJ,UAAT,CAAoBC,QAApB,EAA8BS,KAA9B,EAAqC;AACxC,QAAMC,YAAY,iCAAgB;AAC9BC,kBAAU,CADoB;AAE9BC,mBAAW;AAFmB,KAAhB,CAAlB;AAIA,QAAIC,YAAY,IAAhB;AACA,iBAAGC,gBAAH,CAAoBd,QAApB,EAA8B,EAAEe,UAAU,OAAZ,EAA9B,EACKC,IADL,CACUN,SADV,EAEKO,EAFL,CAEQ,MAFR,EAEgB;AAAA,eAASJ,YAAYK,KAArB;AAAA,KAFhB,EAGKD,EAHL,CAGQ,OAHR,EAGiB,UAACT,GAAD;AAAA,eAASN,QAAQC,GAAR,CAAY,SAAZ,EAAuBK,GAAvB,CAAT;AAAA,KAHjB,EAIKS,EAJL,CAIQ,KAJR,EAIe;AAAA,eAAMR,MAAMI,SAAN,CAAN;AAAA,KAJf,EAKKI,EALL,CAKQ,QALR,EAKkB;AAAA,eAAMf,QAAQC,GAAR,CAAY,QAAZ,CAAN;AAAA,KALlB,EAMKc,EANL,CAMQ,MANR,EAMgB;AAAA,eAAMf,QAAQC,GAAR,CAAY,MAAZ,CAAN;AAAA,KANhB,EAOKc,EAPL,CAOQ,OAPR,EAOiB;AAAA,eAAMf,QAAQC,GAAR,CAAY,OAAZ,CAAN;AAAA,KAPjB;AAQH;AACD","file":"index.js","sourcesContent":["import { LineCounter } from 'chunking-streams';\nimport fs from 'fs';\nexport function createTestFile(fileName) {\n    if (fs.existsSync(fileName)) {\n        console.log('test file already exists');\n        return;\n    }\n    console.log('generating test file');\n    let data = '';\n    let chunkLines = 0;\n    for (let i = 0; i < 1000000; i++) {\n        chunkLines++;\n        data += `${i}\\n`;\n        if (chunkLines === 1000) {\n            console.log('appending to file: ', i);\n            fs.appendFileSync(fileName, data, (err) => console.log(err));\n            chunkLines = 0;\n            data = '';\n        }\n    }\n    console.log('file created');\n}\nexport function readStream(fileName, onEnd) {\n    const lineChunk = new LineCounter({\n        numLines: 2,\n        flushTail: false\n    });\n    let lastChunk = null;\n    fs.createReadStream(fileName, { encoding: 'utf-8' })\n        .pipe(lineChunk)\n        .on('data', chunk => lastChunk = chunk)\n        .on('error', (err) => console.log('onError', err))\n        .on('end', () => onEnd(lastChunk))\n        .on('finish', () => console.log('finish'))\n        .on('open', () => console.log('open'))\n        .on('close', () => console.log('close'));\n}\n//# sourceMappingURL=index.js.map"]}